"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prisma = void 0;
// Import the PrismaClient from the "@prisma/client" package
const client_1 = require("@prisma/client");
// Create an instance of the PrismaClient
exports.prisma = new client_1.PrismaClient({ log: ["query"] });
/*
   The PrismaClient is an auto-generated client library provided by Prisma.
   It allows you to interact with your database using a type-safe API.

   The PrismaClient constructor accepts an optional configuration object.
   In this case, we set the `log` option to ["query"] to enable query logging.
   This means that Prisma will log all executed queries to the console.

   The `prisma` constant holds the instance of the PrismaClient that you can use to perform database operations.
*/
// Example usage:
// You can use the `prisma` instance to query data from your database:
// const users = await prisma.user.findMany();
// This code fetches all users from the "user" table in the database.
// You can also use `prisma` to create new records:
// const newUser = await prisma.user.create({
//   data: {
//     name: "John",
//     age: 30,
//     email: "john@example.com",
//   },
// });
// This code creates a new user with the specified name, age, and email.
// Similarly, you can update and delete records using `prisma`.
// The `log` option set to ["query"] enables logging of database queries.
// This can be helpful for debugging and understanding the SQL queries generated by Prisma.
// Remember to call `prisma.$disconnect()` when you are done using the PrismaClient instance.
// This ensures that any open database connections are closed properly.
// For example:
// await prisma.$disconnect();
// This code disconnects the PrismaClient from the database.
